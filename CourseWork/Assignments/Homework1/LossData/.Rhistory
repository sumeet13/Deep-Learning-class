meanBigMethodDurationPerLine = mean(bigMethodDurationPerLine)
meanSmallMethodDurationPerLine = mean(smallMethodDurationPerLine)
meanBigMethodDurationPerLine
meanSmallMethodDurationPerLine
wilcox.test(bigMethodDurationPerLine, smallMethodDurationPerLine, paired=FALSE)
cohen.d(smallMethodDurationPerLine, bigMethodDurationPerLine)
#Find p-values from durations and visits aggs
wilcox.test(smallMethodAgg$Visit, bigMethodAgg$Visit, paired=FALSE)
cohen.d(smallMethodAgg$Visit, bigMethodAgg$Visit)
wilcox.test(smallMethodAgg$Duration, bigMethodAgg$Duration, paired=FALSE)
cohen.d(smallMethodAgg$Duration, bigMethodAgg$Duration)
#Find First Fixations Trends with Duration and Visits
filterMergedData = filterMergedData[order(filterMergedData$ParticipantId, filterMergedData$MethodId, filterMergedData$FixationId),]
nrow(filterMergedData)
nrow(firstFixations)
firstFixations = aggregate(filterMergedData, by=list(filterMergedData$ParticipantId,filterMergedData$MethodId), FUN=head,1)
nrow(firstFixations)
smallFirstFixations = subset(firstFixations, firstFixations$LineSize <= 22)
bigFirstFixations = subset(firstFixations,  firstFixations$LineSize > 22)
smallFirstFixationsVisitsAgg = aggregate(list(Visits=smallFirstFixations$Group.1), by=list(smallFirstFixations$SrcType), FUN=length)
smallFirstFixations
firstFixations
firstFixations[1,]
#Find First Fixations Trends with Duration and Visits
allPartMergedData = merge(allData, frequencyData, by=c("MethodId", "Line"))
allMergedData = merge(allPartMergedData, methodInfoToMerge, by="MethodId")
allFilterMergedData = subset(allMergedData, InMethod=="TRUE")
filterMergedData = allFilterMergedData[order(allFilterMergedData$ParticipantId, allFilterMergedData$MethodId, allFilterMergedData$FixationId),]
firstFixations = aggregate(allFilterMergedData, by=list(allFilterMergedData$ParticipantId,allFilterMergedData$MethodId), FUN=head,1)
firstFixations
smallFirstFixations = subset(firstFixations, firstFixations$LineSize <= 22)
bigFirstFixations = subset(firstFixations,  firstFixations$LineSize > 22)
smallFirstFixationsVisitsAgg = aggregate(list(Visits=smallFirstFixations$Group.1), by=list(smallFirstFixations$SrcType), FUN=length)
bigFirstFixationsVisitsAgg = aggregate(list(Visits=bigFirstFixations$Group.1), by=list(bigFirstFixations$SrcType), FUN=length)
smallFirstFixationsVisitsAgg$VisitPercentage = smallFirstFixationsVisitsAgg$Visits / sum(smallFirstFixationsVisitsAgg$Visits)
bigFirstFixationsVisitsAgg$VisitPercentage = bigFirstFixationsVisitsAgg$Visits / sum(bigFirstFixationsVisitsAgg$Visits)
#Finding Duration Distribution
smallFirstFixationsDurationAgg = aggregate(list(Duration=smallFirstFixations$TotalDuration), by=list(smallFirstFixations$SrcType), FUN=sum)
bigFirstFixationsDurationAgg = aggregate(list(Duration=bigFirstFixations$TotalDuration), by=list(bigFirstFixations$SrcType), FUN=sum)
smallFirstFixationsDurationAgg$DurationPercentage = smallFirstFixationsDurationAgg$Duration/ sum(smallFirstFixationsDurationAgg$Duration)
bigFirstFixationsDurationAgg$DurationPercentage = bigFirstFixationsDurationAgg$Duration/ sum(bigFirstFixationsDurationAgg$Duration)
smallFirstFixationAverage = sum(smallFirstFixationsDurationAgg$Duration) /sum(smallFirstFixationsVisitsAgg$Visits)
bigFirstFixationAverage = sum(bigFirstFixationsDurationAgg$Duration) / sum(bigFirstFixationsVisitsAgg$Visits)
#Calculate p-values for first fixations
wilcox.test(smallFirstFixationsDurationAgg$Duration, bigFirstFixationsDurationAgg$Duration, paired=FALSE)
smallFirstFixationAverage
smallFirstFixationsDurationAgg
smallFirstFixationsVisitsAgg
allFilterMergedData = subset(allMergedData, InMethod=="TRUE")
allFilterMergedData = allFilterMergedData[order(allFilterMergedData$ParticipantId, allFilterMergedData$MethodId, allFilterMergedData$FixationId),]
firstFixations = aggregate(allFilterMergedData, by=list(allFilterMergedData$ParticipantId,allFilterMergedData$MethodId), FUN=head,1)
smallFirstFixations = subset(firstFixations, firstFixations$LineSize <= 22)
bigFirstFixations = subset(firstFixations,  firstFixations$LineSize > 22)
smallFirstFixationsVisitsAgg = aggregate(list(Visits=smallFirstFixations$Group.1), by=list(smallFirstFixations$SrcType), FUN=length)
bigFirstFixationsVisitsAgg = aggregate(list(Visits=bigFirstFixations$Group.1), by=list(bigFirstFixations$SrcType), FUN=length)
smallFirstFixationsVisitsAgg$VisitPercentage = smallFirstFixationsVisitsAgg$Visits / sum(smallFirstFixationsVisitsAgg$Visits)
bigFirstFixationsVisitsAgg$VisitPercentage = bigFirstFixationsVisitsAgg$Visits / sum(bigFirstFixationsVisitsAgg$Visits)
#Finding Duration Distribution
smallFirstFixationsDurationAgg = aggregate(list(Duration=smallFirstFixations$TotalDuration), by=list(smallFirstFixations$SrcType), FUN=sum)
bigFirstFixationsDurationAgg = aggregate(list(Duration=bigFirstFixations$TotalDuration), by=list(bigFirstFixations$SrcType), FUN=sum)
firstFixations
firstFixations[1,]
allMergedData
allMergedData[1,]
methodInfoToMerge
#Find First Fixations Trends with Duration and Visits
allPartMergedData = merge(allData, frequencyData, by=c("MethodId", "Line"))
allMergedData = merge(allPartMergedData, methodInfoToMerge, by="MethodId")
allData = read.csv(file=paste(directory, "all-processed.csv", sep=""), header=TRUE, sep=",")
#Find First Fixations Trends with Duration and Visits
allPartMergedData = merge(allData, frequencyData, by=c("MethodId", "Line"))
allMergedData = merge(allPartMergedData, methodInfoToMerge, by="MethodId")
allFilterMergedData = subset(allMergedData, InMethod=="TRUE")
allFilterMergedData = allFilterMergedData[order(allFilterMergedData$ParticipantId, allFilterMergedData$MethodId, allFilterMergedData$FixationId),]
firstFixations = aggregate(allFilterMergedData, by=list(allFilterMergedData$ParticipantId,allFilterMergedData$MethodId), FUN=head,1)
smallFirstFixations = subset(firstFixations, firstFixations$LineSize <= 22)
bigFirstFixations = subset(firstFixations,  firstFixations$LineSize > 22)
smallFirstFixationsVisitsAgg = aggregate(list(Visits=smallFirstFixations$Group.1), by=list(smallFirstFixations$SrcType), FUN=length)
bigFirstFixationsVisitsAgg = aggregate(list(Visits=bigFirstFixations$Group.1), by=list(bigFirstFixations$SrcType), FUN=length)
smallFirstFixationsVisitsAgg$VisitPercentage = smallFirstFixationsVisitsAgg$Visits / sum(smallFirstFixationsVisitsAgg$Visits)
bigFirstFixationsVisitsAgg$VisitPercentage = bigFirstFixationsVisitsAgg$Visits / sum(bigFirstFixationsVisitsAgg$Visits)
#Finding Duration Distribution
smallFirstFixationsDurationAgg = aggregate(list(Duration=smallFirstFixations$TotalDuration), by=list(smallFirstFixations$SrcType), FUN=sum)
bigFirstFixationsDurationAgg = aggregate(list(Duration=bigFirstFixations$TotalDuration), by=list(bigFirstFixations$SrcType), FUN=sum)
smallFirstFixationsDurationAgg$DurationPercentage = smallFirstFixationsDurationAgg$Duration/ sum(smallFirstFixationsDurationAgg$Duration)
smallFirstFixations
#Finding Duration Distribution
smallFirstFixationsDurationAgg = aggregate(list(Duration=smallFirstFixations$Duration), by=list(smallFirstFixations$SrcType), FUN=sum)
bigFirstFixationsDurationAgg = aggregate(list(Duration=bigFirstFixations$Duration), by=list(bigFirstFixations$SrcType), FUN=sum)
smallFirstFixationsDurationAgg$DurationPercentage = smallFirstFixationsDurationAgg$Duration/ sum(smallFirstFixationsDurationAgg$Duration)
bigFirstFixationsDurationAgg$DurationPercentage = bigFirstFixationsDurationAgg$Duration/ sum(bigFirstFixationsDurationAgg$Duration)
smallFirstFixationAverage = sum(smallFirstFixationsDurationAgg$Duration) /sum(smallFirstFixationsVisitsAgg$Visits)
bigFirstFixationAverage = sum(bigFirstFixationsDurationAgg$Duration) / sum(bigFirstFixationsVisitsAgg$Visits)
#Calculate p-values for first fixations
wilcox.test(smallFirstFixationsDurationAgg$Duration, bigFirstFixationsDurationAgg$Duration, paired=FALSE)
wilcox.test(smallFirstFixationsVisitsAgg$Visits, bigFirstFixationsVisitsAgg$Visits, paired=FALSE)
smallFirstFixationsDurationAgg
bigFirstFixationsDurationAgg
firstFixations
#Find First Fixations Trends with Duration and Visits
allPartMergedData = merge(allData, frequencyData, by=c("MethodId", "Line"))
allMergedData = merge(allPartMergedData, methodInfoToMerge, by="MethodId")
allFilterMergedData = subset(allMergedData, InMethod=="TRUE")
allFilterMergedData = allFilterMergedData[order(allFilterMergedData$ParticipantId, allFilterMergedData$MethodId, allFilterMergedData$FixationId),]
firstFixations = aggregate(allFilterMergedData, by=list(allFilterMergedData$ParticipantId,allFilterMergedData$MethodId), FUN=head,1)
firstFixations
aggregate(firstFixations, by=list(firstFixations$SrcType), FUN=head,1)
aggregate(firstFixations, by=list(firstFixations$SrcType), FUN=length)
directory = "gitlab/colepeterson/NahlaTokenDistributionStudy/finalCode/"
data = read.csv(paste(directory, "all-processed.csv", sep=""), header=TRUE)
frequencyData = read.csv(paste(directory,"line-type-totals.csv", sep=""), header=TRUE)
library('effsize')
library('xtable')
orderedData = data[order(data$MethodId, data$ParticipantId, data$FixationId),]
mergedData = merge(orderedData, frequencyData, by=c("MethodId", "Line"))
filterMerged = subset(mergedData, InMethod=="TRUE")
firstInMethod = aggregate(filterMerged, list(filterMerged$MethodId, filterMerged$ParticipantId), FUN=head, 1)
nrow(orderedData)
nrow(mergedData)
directory = "gitlab/colepeterson/NahlaTokenDistributionStudy/finalCode/";
data = read.csv(file=paste(directory, "all-aggregated.csv", sep=""), header=TRUE, sep=",")
allData = read.csv(file=paste(directory, "all-processed.csv", sep=""), header=TRUE, sep=",")
frequencyData = read.csv(file=paste(directory, "line-type-totals.csv", sep=""), header=TRUE, sep=",")
methodInfoData = read.csv(file=paste(directory, "method-info.csv", sep=""), header=TRUE, sep=",")
library('effsize')
methodInfoToMerge = methodInfoData [,0]
methodInfoToMerge$MethodId = methodInfoData$m
methodInfoToMerge$LineSize = methodInfoData$size
allPartMergedData = merge(allData, frequencyData, by=c("MethodId", "Line"))
nrow(allPartMergedData)
allMergedData = merge(allPartMergedData, methodInfoToMerge, by="MethodId")
nrow(allPartMergedData)
byCategory
allFilterMergedData = subset(allMergedData, InMethod=="TRUE")
nrow(allFilterMergedData)
allFilterMergedData = allFilterMergedData[order(allFilterMergedData$ParticipantId, allFilterMergedData$MethodId, allFilterMergedData$FixationId),]
firstFixations = aggregate(allFilterMergedData, by=list(allFilterMergedData$ParticipantId,allFilterMergedData$MethodId), FUN=head,1)
nrow(firstFixations)
aggregate(firstFixations, by=list(firstFixations$SrcType), FUN=length)
firstInMethod
firstFixations
firstFixations[1,]
firstInMethod[1,]
firstInMethod[20,]
firstFixations[20,]
firstFixations[2,]
firstFixations[2,]
firstInMethod[2,]
allFilterMergedData = allFilterMergedData[order(allFilterMergedData$MethodId, allFilterMergedData$ParticipantId, allFilterMergedData$FixationId),]
firstFixations = aggregate(allFilterMergedData, by=list(allFilterMergedData$ParticipantId,allFilterMergedData$MethodId), FUN=head,1)
firstInMethod[2,]
firstFixations[2,]
allFilterMergedData = allFilterMergedData[order(allFilterMergedData$MethodId, allFilterMergedData$ParticipantId, allFilterMergedData$FixationId),]
firstFixations = aggregate(allFilterMergedData, by=list(allFilterMergedData$MethodId, allFilterMergedData$ParticipantId), FUN=head,1)
firstFixations[2,]
firstInMethod[2,]
firstInMethod[20,]
firstFixations[20,]
directory = "gitlab/colepeterson/NahlaTokenDistributionStudy/finalCode/"
data = read.csv(paste(directory, "all-processed.csv", sep=""), header=TRUE)
frequencyData = read.csv(paste(directory,"line-type-totals.csv", sep=""), header=TRUE)
library('effsize')
library('xtable')
orderedData = data[order(data$MethodId, data$ParticipantId, data$FixationId),]
mergedData = merge(orderedData, frequencyData, by=c("MethodId", "Line"))
filterMerged = subset(mergedData, InMethod=="TRUE")
firstInMethod = aggregate(filterMerged, list(filterMerged$MethodId, filterMerged$ParticipantId), FUN=head, 1)
byCategory = aggregate(firstInMethod, list(firstInMethod$SrcType), length)
byCategory
filterMerged = filterMerged[order(filterMerged$MethodId, filterMerged$ParticipantId, filterMerged$FixationId),]
firstInMethod = aggregate(filterMerged, list(filterMerged$MethodId, filterMerged$ParticipantId), FUN=head, 1)
byCategory = aggregate(firstInMethod, list(firstInMethod$SrcType), length)
byCategory
filterMerged = filterMerged[order(filterMerged$FixationId),]
firstInMethod = aggregate(filterMerged, list(filterMerged$MethodId, filterMerged$ParticipantId), FUN=head, 1)
byCategory = aggregate(firstInMethod, list(firstInMethod$SrcType), length)
byCategory
byCategory = aggregate(firstInMethod, list(firstInMethod$SrcType), length)
byCategoryVisits = data.frame(Group=byCategory$Group.1, Total=byCategory$Line)
byCategoryVisits$Percentage = byCategoryVisits$Total / sum(byCategoryVisits$Total)
filterMergedWithDuration = data.frame(Duration = firstInMethod$Duration, SrcType = firstInMethod$SrcType)
firstInMethodCategory = aggregate(filterMergedWithDuration$Duration, list(filterMergedWithDuration$SrcType), FUN=sum)
durationByCategory = data.frame(Group=firstInMethodCategory$Group.1, Total=firstInMethodCategory$x)
durationByCategory$Percentage = durationByCategory$Total / sum(durationByCategory$Total)
#Calculate p-value
allMergedData = merge(orderedData, frequencyData, by=c("MethodId", "Line"))
allFilterMerged = subset(allMergedData, InMethod=="TRUE")
filterMergedFrequencyByCategory = aggregate(allFilterMerged, list(allFilterMerged$SrcType), length)
filterMergedFrequencyVisits = data.frame(Group=filterMergedFrequencyByCategory$Group.1, Total=filterMergedFrequencyByCategory$Line)
wilcox.test(filterMergedFrequencyVisits$Total, byCategoryVisits$Total, paired=FALSE)
cohen.d(filterMergedFrequencyVisits$Total, byCategoryVisits$Total)
filterMergedFrequencyDurationByCategory = aggregate(data.frame(Total=allFilterMerged$Duration), list(allFilterMerged$SrcType), FUN=sum)
wilcox.test(filterMergedFrequencyDurationByCategory$Total, durationByCategory$Total, paired=FALSE)
cohen.d(filterMergedFrequencyDurationByCategory$Total, durationByCategory$Total)
lastOrderedData = data[rev(order(data$MethodId, data$ParticipantId, data$FixationId)),]
lastMergedData = merge(lastOrderedData, frequencyData, by=c("MethodId", "Line"))
lastOrderedData = data[rev(order(data$FixationId)),]
lastMergedData = merge(lastOrderedData, frequencyData, by=c("MethodId", "Line"))
lastFilterMerged = subset(lastMergedData, InMethod=="TRUE")
lastFilterMerged = lastFilterMerged[rev(order(lastFilterMerged$FixationId)),]
lastFirstInMethod = aggregate(lastFilterMerged, list(lastFilterMerged$MethodId, lastFilterMerged$ParticipantId), FUN=head, 1)
lastByCategory = aggregate(lastFirstInMethod, list(lastFirstInMethod$SrcType), length)
lastByCategoryVisits = data.frame(Group=lastByCategory$Group.1, Total=lastByCategory$Line)
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory
lastByCategory = aggregate(lastFirstInMethod, list(lastFirstInMethod$SrcType), length)
lastByCategoryVisits = data.frame(Group=lastByCategory$Group.1, Total=lastByCategory$Line)
lastByCategoryVisits$Percentage = lastByCategoryVisits$Total / sum(lastByCategoryVisits$Total)
lastFilterMergedWithDuration = data.frame(Duration = lastFirstInMethod$Duration, SrcType = lastFirstInMethod$SrcType)
lastFirstInMethodCategory = aggregate(lastFilterMergedWithDuration$Duration, list(lastFilterMergedWithDuration$SrcType), FUN=sum)
lastDurationByCategory = data.frame(Group=lastFirstInMethodCategory$Group.1, Total=lastFirstInMethodCategory$x)
lastDurationByCategory$Percentage = lastDurationByCategory$Total / sum(lastDurationByCategory$Total)
#calculate p-values
lastAllMergedData = merge(data, frequencyData, by=c("MethodId", "Line"))
lastAllFilterMerged = subset(lastAllMergedData, InMethod=="TRUE")
lastFilterMergedFrequencyByCategory = aggregate(lastAllFilterMerged, list(lastAllFilterMerged$SrcType), length)
lastFilterMergedFrequencyVisits = data.frame(Group=lastFilterMergedFrequencyByCategory$Group.1, Total=lastFilterMergedFrequencyByCategory$Line)
wilcox.test(lastFilterMergedFrequencyVisits$Total, lastByCategoryVisits$Total, paired=FALSE)
cohen.d(lastFilterMergedFrequencyVisits$Total, lastByCategoryVisits$Total)
lastFilterMergedFrequencyDurationByCategory = aggregate(data.frame(Total=lastAllFilterMerged$Duration), list(lastAllFilterMerged$SrcType), FUN=sum)
wilcox.test(lastFilterMergedFrequencyDurationByCategory$Total, lastDurationByCategory$Total, paired=FALSE)
cohen.d(lastFilterMergedFrequencyDurationByCategory$Total, lastDurationByCategory$Total)
#Output Table
outputTable = data.frame(LineType = byCategoryVisits$Group)
outputTable$FirstFixation = paste(format(byCategoryVisits$Percentage*100, digits=2, nsmall=2), " (", format(durationByCategory$Percentage*100, digits=2, nsmall=2), ")", sep="")
outputTable$LastFixation = paste(format(lastByCategoryVisits$Percentage*100, digits=2, nsmall=2), " (", format(lastDurationByCategory$Percentage*100, digits=2, nsmall=2), ")", sep="")
outputTable = outputTable[order(byCategoryVisits$Percentage),]
durationXTable = xtable(outputTable,
caption="Distributions of First and Last Fixations as Percentage of Total Frequency and Percentage of Total Duration in parentheses.")
print(durationXTable, include.rownames=FALSE)
allPartMergedData = merge(allData, frequencyData, by=c("MethodId", "Line"))
allMergedData = merge(allPartMergedData, methodInfoToMerge, by="MethodId")
allFilterMergedData = subset(allMergedData, InMethod=="TRUE")
allFilterMergedData = allFilterMergedData[order(allFilterMergedData$MethodId, allFilterMergedData$ParticipantId, allFilterMergedData$FixationId),]
firstFixations = aggregate(allFilterMergedData, by=list(allFilterMergedData$MethodId, allFilterMergedData$ParticipantId), FUN=head,1)
smallFirstFixations = subset(firstFixations, firstFixations$LineSize <= 22)
bigFirstFixations = subset(firstFixations,  firstFixations$LineSize > 22)
smallFirstFixationsVisitsAgg = aggregate(list(Visits=smallFirstFixations$Group.1), by=list(smallFirstFixations$SrcType), FUN=length)
bigFirstFixationsVisitsAgg = aggregate(list(Visits=bigFirstFixations$Group.1), by=list(bigFirstFixations$SrcType), FUN=length)
smallFirstFixationsVisitsAgg$VisitPercentage = smallFirstFixationsVisitsAgg$Visits / sum(smallFirstFixationsVisitsAgg$Visits)
bigFirstFixationsVisitsAgg$VisitPercentage = bigFirstFixationsVisitsAgg$Visits / sum(bigFirstFixationsVisitsAgg$Visits)
#Finding Duration Distribution
smallFirstFixationsDurationAgg = aggregate(list(Duration=smallFirstFixations$Duration), by=list(smallFirstFixations$SrcType), FUN=sum)
bigFirstFixationsDurationAgg = aggregate(list(Duration=bigFirstFixations$Duration), by=list(bigFirstFixations$SrcType), FUN=sum)
smallFirstFixationsDurationAgg$DurationPercentage = smallFirstFixationsDurationAgg$Duration/ sum(smallFirstFixationsDurationAgg$Duration)
bigFirstFixationsDurationAgg$DurationPercentage = bigFirstFixationsDurationAgg$Duration/ sum(bigFirstFixationsDurationAgg$Duration)
smallFirstFixationAverage = sum(smallFirstFixationsDurationAgg$Duration) /sum(smallFirstFixationsVisitsAgg$Visits)
bigFirstFixationAverage = sum(bigFirstFixationsDurationAgg$Duration) / sum(bigFirstFixationsVisitsAgg$Visits)
#Calculate p-values for first fixations
wilcox.test(smallFirstFixationsDurationAgg$Duration, bigFirstFixationsDurationAgg$Duration, paired=FALSE)
wilcox.test(smallFirstFixationsVisitsAgg$Visits, bigFirstFixationsVisitsAgg$Visits, paired=FALSE)
smallFirstFixationsDurationAgg
bigFirstFixationsDurationAgg
smallFirstFixationsVisitsAgg
bigFirstFixationsVisitsAgg
#Outputtable
outputFrame = data.frame(LineType=smallFirstFixationsDurationAgg$Group.1)
outputFrame$SortIndex = bigFirstFixationsDurationAgg$Duration
outputFrame$BigFirstFixationString = paste(format(bigFirstFixationsVisitsAgg$VisitPercentage*100, digits=2, nsmall=2), " (", format(bigFirstFixationsDurationAgg$DurationPercentage*100, digits=2, nsmall=2), ")", sep="")
outputFrame
outputFrame$BigFirstFixationString = paste(format(bigFirstFixationsVisitsAgg$VisitPercentage*100, digits=2, nsmall=2), " (", format(bigFirstFixationsDurationAgg$DurationPercentage*100, digits=2, nsmall=2), ")", sep="")
outputFrame$SmallFirstFixationString = paste(format(smallFirstFixationsVisitsAgg$VisitPercentage*100, digits=2, nsmall=2), " (", format(smallFirstFixationsDurationAgg$DurationPercentage*100, digits=2, nsmall=2), ")", sep="")
outputTable = xtable(outputFrame, caption="Distribution of First Fixations of Big and Small Methods in Percentage of Frequency and Percentage of Durations in parentheses")
print(outputTable, include.rows=FALSE)
print(outputTable, include.rownames=FALSE)
outputTable = xtable(outputFrame[,c(0,1,3,4)], caption="Distribution of First Fixations of Big and Small Methods in Percentage of Frequency and Percentage of Durations in parentheses")
print(outputTable, include.rownames=FALSE)
outputFrame = outputFrame[order(outputFrame$SortIndex),]
outputTable = xtable(outputFrame[,c(0,1,3,4)], caption="Distribution of First Fixations of Big and Small Methods in Percentage of Frequency and Percentage of Durations in parentheses")
print(outputTable, include.rownames=FALSE)
outputFrame$SortIndex = bigFirstFixationsVisitsAgg$Visits
outputFrame$BigFirstFixationString = paste(format(bigFirstFixationsVisitsAgg$VisitPercentage*100, digits=2, nsmall=2), " (", format(bigFirstFixationsDurationAgg$DurationPercentage*100, digits=2, nsmall=2), ")", sep="")
outputFrame$SmallFirstFixationString = paste(format(smallFirstFixationsVisitsAgg$VisitPercentage*100, digits=2, nsmall=2), " (", format(smallFirstFixationsDurationAgg$DurationPercentage*100, digits=2, nsmall=2), ")", sep="")
outputFrame = outputFrame[order(outputFrame$SortIndex),]
outputTable = xtable(outputFrame[,c(0,1,3,4)], caption="Distribution of First Fixations of Big and Small Methods in Percentage of Frequency and Percentage of Durations in parentheses")
print(outputTable, include.rownames=FALSE)
#Calculate p-values for first fixations
wilcox.test(smallFirstFixationsDurationAgg$Duration, bigFirstFixationsDurationAgg$Duration, paired=FALSE)
bigFirstFixationsVisitsAgg
outputFrame
#Outputtable
outputFrame = data.frame(LineType=smallFirstFixationsDurationAgg$Group.1)
outputFrame$SortIndex = bigFirstFixationsVisitsAgg$Visits
outputFrame$BigFirstFixationString = paste(format(bigFirstFixationsVisitsAgg$VisitPercentage*100, digits=2, nsmall=2), " (", format(bigFirstFixationsDurationAgg$DurationPercentage*100, digits=2, nsmall=2), ")", sep="")
outputFrame$SmallFirstFixationString = paste(format(smallFirstFixationsVisitsAgg$VisitPercentage*100, digits=2, nsmall=2), " (", format(smallFirstFixationsDurationAgg$DurationPercentage*100, digits=2, nsmall=2), ")", sep="")
outputFrame = outputFrame[order(outputFrame$SortIndex),]
outputTable = xtable(outputFrame[,c(0,1,3,4)], caption="Distribution of First Fixations of Big and Small Methods in Percentage of Frequency and Percentage of Durations in parentheses")
print(outputTable, include.rownames=FALSE)
outputAllFrame = data.frame(LineType=smallMethodAgg$Group.1)
outputAllFrame$SortIndex = smallMethodAgg$Visit
outputAllFrame$BigMethodString = paste(format(bigMethodAgg$VisitPercentage*100, digits=2, nsmall=2), " (", format(bigMethodAgg$DurationPercentage*100, digits=2, nsmall=2), ")", sep="")
outputAllFrame$SmallMethodString = paste(format(smallMethodAgg$VisitPercentage*100, digits=2, nsmall=2), " (", format(smallMethodAgg$DurationPercentage*100, digits=2, nsmall=2), ")", sep="")
outputAllFrame = outputAllFrame[order(outputAllFrame$SortIndex),]
outputAllTable = xtable(outputAllFrame[,c(0,1,3,4)], caption="Distribution of First Fixations of Big and Small Methods in Percentage of Frequency and Percentage of Durations in parentheses")
print(outputAllTable, include.rownames=FALSE)
bigMethodAgg
outputAllFrame = data.frame(LineType=smallMethodAgg$Group.1)
outputAllFrame$SortIndex = bigMethodAgg$Visit
outputAllFrame$BigMethodString = paste(format(bigMethodAgg$VisitPercentage*100, digits=2, nsmall=2), " (", format(bigMethodAgg$DurationPercentage*100, digits=2, nsmall=2), ")", sep="")
outputAllFrame$SmallMethodString = paste(format(smallMethodAgg$VisitPercentage*100, digits=2, nsmall=2), " (", format(smallMethodAgg$DurationPercentage*100, digits=2, nsmall=2), ")", sep="")
outputAllFrame = outputAllFrame[order(outputAllFrame$SortIndex),]
outputAllTable = xtable(outputAllFrame[,c(0,1,3,4)], caption="Distribution of First Fixations of Big and Small Methods in Percentage of Frequency and Percentage of Durations in parentheses")
print(outputAllTable, include.rownames=FALSE)
outputFrame = data.frame(LineType=smallFirstFixationsDurationAgg$Group.1)
outputFrame$SortIndex = bigFirstFixationsVisitsAgg$Visits
outputFrame$BigFirstFixationString = paste(format(bigFirstFixationsVisitsAgg$VisitPercentage*100, digits=2, nsmall=2), " (", format(bigFirstFixationsDurationAgg$DurationPercentage*100, digits=2, nsmall=2), ")", sep="")
outputFrame$SmallFirstFixationString = paste(format(smallFirstFixationsVisitsAgg$VisitPercentage*100, digits=2, nsmall=2), " (", format(smallFirstFixationsDurationAgg$DurationPercentage*100, digits=2, nsmall=2), ")", sep="")
outputFrame = outputFrame[order(outputFrame$SortIndex),]
outputTable = xtable(outputFrame[,c(0,1,3,4)], caption="Distribution of First Fixations of Big and Small Methods in Percentage of Frequency and Percentage of Durations in parentheses")
print(outputTable, include.rownames=FALSE)
#Calculate p-values for first fixations
wilcox.test(smallFirstFixationsDurationAgg$Duration, bigFirstFixationsDurationAgg$Duration, paired=FALSE)
wilcox.test(smallFirstFixationsVisitsAgg$Visits, bigFirstFixationsVisitsAgg$Visits, paired=FALSE)
smallMethodAgg
wilcox.test(smallMethodAgg$Duration, bigMethodAgg$Duration, paired=FALSE)
wilcox.test(smallMethodAgg$Visit, bigMethodAgg$Visit, paired=FALSE)
lines(data$TrainLoss, data$Epoch)
setwd("/Users/colepeterson/GitHub/CSCE896_Deep_Learning/Homework1/LossData")
data = read.csv("data_model8.csv")
plot(TestLoss ~ Epoch, data)
plot(TrainLoss ~ Epoch, data)
lines(data$TrainLoss, data$Epoch)
lines(data$Epoch, data$TrainLoss)
plot(TestLoss ~ Epoch, data)
plot(TrainLoss ~ Epoch, data)
lines(data$Epoch, data$TrainLoss)
plot(TestLoss ~ Epoch, data, col="red")
par(new=TRUE)
plot(TrainLoss ~ Epoch, data, col="green")
par(new=FALSE)
plot(TrainLoss ~ Epoch, data, col="green")
data = read.csv("data_model8.csv")
plot(TestLoss ~ Epoch, data, col="red")
par(new=FALSE)
plot(TrainLoss ~ Epoch, data, col="green")
plot(TestLoss ~ Epoch, data, col="red", lyt=1)
plot(TrainLoss ~ Epoch, data, col="green", lyt=2)
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
plot(TestLoss ~ Epoch, data, col="red", lyt=1)
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(0,1))
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
maxLoss
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
minLoss
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,MaxLoss))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss))
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TestLoss, col="red")
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model2.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss))
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model1.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss))
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model5.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss))
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model6.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss))
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
data = read.csv("data_model7.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss))
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
data = read.csv("data_model3.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss))
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model1.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model2.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model2.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model4.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model5.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model6.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model7.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model8.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model5.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model7.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model1.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model3.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model2.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
lines(data$Epoch, data$TrainLoss, col="green")
data = read.csv("data_model4.csv")
maxLoss = max(c(max(data$TestLoss, data$TrainLoss)))
minLoss = min(c(min(data$TestLoss, data$TrainLoss)))
plot(TestLoss ~ Epoch, data, col="red", lyt=1, ylim=c(minLoss,maxLoss), ylab="Loss")
lines(data$Epoch, data$TestLoss, col="red")
points(TrainLoss ~ Epoch, data, col="green", lyt=2)
